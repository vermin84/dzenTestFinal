// backend/server.js
import express from "express";
import http from "http";
import { Server } from "socket.io";
import cors from "cors";
import mysql from "mysql2/promise";
import dotenv from 'dotenv';
dotenv.config();


const app = express();
const server = http.createServer(app);

app.use(cors());
app.use(express.json());

// ===========================
// Socket.IO –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
// ===========================
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
    credentials: true,
  },
});

let activeSessions = 0;

io.on("connection", (socket) => {
  activeSessions++;
  console.log("New connection. Active sessions:", activeSessions);
  io.emit("activeSessions", activeSessions);

  socket.on("disconnect", () => {
    activeSessions--;
    console.log("Disconnected. Active sessions:", activeSessions);
    io.emit("activeSessions", activeSessions);
  });
});

// ===========================
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL
// ===========================
/*const pool = mysql.createPool({
  host: process.env.DB_HOST, //|| "mysql.railway.internal",
  user: process.env.DB_USER, // || "root",
  password: process.env.DB_PASSWORD,// || "DzEOZoNrzVwqtdIplsJYWkwtbZJTMGkJ",
  database: process.env.DB_NAME, // || "railway",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});*/
const pool = mysql.createPool({
  host: process.env.MYSQLHOST || process.env.DB_HOST || "localhost",
  port: process.env.MYSQLPORT || process.env.DB_PORT || 3306,
  user: process.env.MYSQLUSER || process.env.DB_USER || "root",
  password: process.env.MYSQLPASSWORD || process.env.DB_PASSWORD || "root",
  database: process.env.MYSQLDATABASE || process.env.DB_NAME || "testdb",
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

// ===========================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
// ===========================
const formatProduct = (p) => ({
  ...p,
  price: [
    { value: Number(p.price_usd || 0), symbol: "USD", isDefault: 1 },
    { value: Number(p.price_uah || 0), symbol: "UAH", isDefault: 0 },
  ],
  guarantee: {
    start: p.guarantee_start || null,
    end: p.guarantee_end || null,
  },
});

// ===========================
// REST API
// ===========================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
app.get("/", (req, res) => {
  res.send("Server is running üöÄ");
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
app.get("/products", async (req, res) => {
  try {
    const [rows] = await pool.query("SELECT * FROM products ORDER BY id");
    res.json(rows.map(formatProduct));
  } catch (err) {
    console.error("Error fetching products:", err.code, err.sqlMessage);
    res.status(500).json({ error: err.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
app.get("/orders", async (req, res) => {
  try {
    const [rows] = await pool.query("SELECT * FROM orders ORDER BY id");
    res.json(rows);
  } catch (err) {
    console.error("Error fetching orders:", err.code, err.sqlMessage);
    res.status(500).json({ error: err.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
app.get("/orders-with-products", async (req, res) => {
  try {
    const [orders] = await pool.query("SELECT * FROM orders ORDER BY id");
    const [products] = await pool.query("SELECT * FROM products ORDER BY id");

    const result = orders.map(order => ({
      ...order,
      products: products
        .filter(p => p.order_id === order.id)
        .map(formatProduct),
    }));

    res.json(result);
  } catch (err) {
    console.error("Error fetching orders with products:", err.code, err.sqlMessage);
    res.status(500).json({ error: err.message });
  }
});

// ===========================
// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ===========================
const PORT = process.env.PORT || 3000; // –±–µ—Ä–µ–º –ø–æ—Ä—Ç –∏–∑ Railway –∏–ª–∏ 3000 –ª–æ–∫–∞–ª—å–Ω–æ

server.listen(PORT, async () => {
  try {
    // pool –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω —á–µ—Ä–µ–∑ DATABASE_URL –∏–ª–∏ –¥—Ä—É–≥–∏–µ env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    await pool.query("SELECT 1");
    console.log(`‚úÖ Server started on port ${PORT} and connected to MySQL`);
  } catch (err) {
    console.error("‚ùå Failed to connect to MySQL:", err.code, err.sqlMessage);
  }
});
